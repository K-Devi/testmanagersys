# Generated by Django 4.0.4 on 2022-05-23 07:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chapters',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Chapters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Efmigrationshistory',
            fields=[
                ('migrationid', models.CharField(db_column='MigrationId', max_length=150, primary_key=True, serialize=False)),
                ('productversion', models.CharField(db_column='ProductVersion', max_length=32)),
            ],
            options={
                'db_table': '__EFMigrationsHistory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Faculties',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Faculties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Grades',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('gradenumber', models.IntegerField(db_column='GradeNumber')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
            ],
            options={
                'db_table': 'Grades',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.UUIDField(db_column='Id', primary_key=True, serialize=False)),
                ('path', models.TextField(blank=True, db_column='Path', null=True)),
                ('width', models.IntegerField(db_column='Width')),
                ('height', models.IntegerField(db_column='Height')),
                ('size', models.IntegerField(db_column='Size')),
                ('imagebytes', models.BinaryField(blank=True, db_column='ImageBytes', null=True)),
                ('uploaddatetime', models.DateTimeField(db_column='UploadDateTime')),
            ],
            options={
                'db_table': 'Images',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('body', models.TextField(blank=True, db_column='Body', null=True)),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'Questions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Questionthemes',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'QuestionThemes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Questiontypes',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'QuestionTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Roles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sessionanswers',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('comments', models.TextField(blank=True, db_column='Comments', null=True)),
            ],
            options={
                'db_table': 'SessionAnswers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
            ],
            options={
                'db_table': 'Subjects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Testsessions',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('startdatetime', models.DateTimeField(db_column='StartDatetime')),
                ('finishdatetime', models.DateTimeField(blank=True, db_column='FinishDatetime', null=True)),
                ('timelimitdatetime', models.DateTimeField(db_column='TimeLimitDatetime')),
            ],
            options={
                'db_table': 'TestSessions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Topicrule',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('questionscount', models.IntegerField(db_column='QuestionsCount')),
            ],
            options={
                'db_table': 'TopicRule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Topics',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('timelimit', models.DurationField(db_column='TimeLimit')),
            ],
            options={
                'db_table': 'Topics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('email', models.TextField(blank=True, db_column='Email', null=True)),
                ('username', models.TextField(blank=True, db_column='Username', null=True)),
                ('password', models.TextField(blank=True, db_column='Password', null=True)),
                ('firstname', models.TextField(blank=True, db_column='FirstName', null=True)),
                ('lastname', models.TextField(blank=True, db_column='LastName', null=True)),
                ('middlename', models.TextField(blank=True, db_column='MiddleName', null=True)),
                ('ages', models.IntegerField(db_column='Ages')),
                ('registrationdate', models.DateTimeField(db_column='RegistrationDate')),
            ],
            options={
                'db_table': 'Users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chaptertheme',
            fields=[
                ('chaptersid', models.OneToOneField(db_column='ChaptersId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='professor.chapters')),
            ],
            options={
                'db_table': 'ChapterTheme',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Gradequestion',
            fields=[
                ('gradesid', models.OneToOneField(db_column='GradesId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='professor.grades')),
            ],
            options={
                'db_table': 'GradeQuestion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Groupsubject',
            fields=[
                ('groupsid', models.OneToOneField(db_column='GroupsId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='professor.groups')),
            ],
            options={
                'db_table': 'GroupSubject',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Groupuser',
            fields=[
                ('groupsid', models.OneToOneField(db_column='GroupsId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='professor.groups')),
            ],
            options={
                'db_table': 'GroupUser',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Roleuser',
            fields=[
                ('rolesid', models.OneToOneField(db_column='RolesId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='professor.roles')),
            ],
            options={
                'db_table': 'RoleUser',
                'managed': False,
            },
        ),
    ]
